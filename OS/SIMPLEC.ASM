
; WE ASSUME THAT THE PROGRAM HAS ALREADY BEEN READ INTO 
; MEMORY. THE MEMORY LOCATION THE PROGRAM IS STORED AT 
; SHOULD BE LOCATED IN HL. THE ENTRY POINT OF THIS PROGRAM
; WILL TOKENIZE THE INPUT CODE, VERIFY THE SYNTAX AND THEN
; EXECUTE IT. AT THE CURRENT MOMENT, THIS IS THE MODE OF
; OPERATION. THERE IS NO COMPILED VERSION OF A SIMPLE C 
; PROGRAM, ONLY THE HAND WRITTEN FORM, WHICH IS THEN
; INTERPRETED. 

    INCLUDE "MEMNGR.ASM"
    INCLUDE "STRING.INC"
    INCLUDE "FUNCTION.INC"

TOKENIZE:
NUM_PARMS SET 1
    ENTER           ; TOP OF STACK SHOULD BE PGM ADDRESS
    CALL TO_LOWER   ; LOWERCASE EVERYTHING
    POP  H          ; ADDRESS INTO H
    LXI  D,400H     ; START WITH 1K MEMORY FOR TOKENIZED VALUES
    ; NEED CALL TO MALLOC HERE

TOK_START:
    MOV  A,M        ; LOAD NEXT CHARACTER INTO A
    CPI  ' '        ; SPACE?
    JZ   TOK_SKIP   ; IF SO, SKIP IT
    CPI  0AH        ; NEW LINE?
    JZ   TOK_SKIP   ; IF SO, SKIP IT

; AT THIS POINT WE HAVE A NON-WHITESPACE CHAR
; THIS SECTION ENSURES IT IS A VALID CHARACTER
    MOV  C,A        ; CHAR INTO C
    PUSH B          ; STORE CHAR ON STACK
    LXI  B,VALID_STARTS 
    PUSH B          ; PUSH SQUENCE OF VALID TOKENS
    CALL CONTAINS   ; ENSURE CHAR IS VALID
    JNZ  TOK_ILLEGAL; IF NOT PRESENT, IT IS NOT A VALID CHAR

; DETERMINED IT IS A VALID CHAR
; THIS SECTION CHECKS TO SEE IF IT IS A SYMBOL OR CHAR/DIGIT
    POP  B
    LXI  B,SYMBOL_TOKENS
    PUSH B          ; PUSH SEQUENCE OF SYMBOLS
    CALL CONTAINS   ; VALID SYMBOL?
    JZ   TOK_SYMBOL ; IF SO, PROCESS SYMBOL
    POP  B
    POP  B          ; CLEAR STACK
    MOV  A,C        ; MOVE CHAR BACK INTO A

; GETTING HERE, WE KNOW WE HAVE A WORD OR NUMBER
    CPI  'a'        ; A?
    JZ   TOK_A      ; IF SO, CHECK A WORDS
    CPI  'b'        ; B?
    JZ   TOK_B      ; CHECK B WORDS
    CPI  'c'        ; C?
    JZ   TOK_C      ; CHECK C WORDS
    CPI  'e'        ; E?
    JZ   TOK_E      ; CHECK E WORDS
    CPI  'f'        ; F?
    JZ   TOK_F      ; CHECK F WORDS
    CPI  'i'        ; I?
    JZ   TOK_I      ; CHECK I WORDS
    CPI  'n'        ; N?
    JZ   TOK_N      ; CHECK N WORDS
    CPI  'o'        ; O?
    JZ   TOK_O      ; CHECK O WORDS
    CPI  'r'        ; R?
    JZ   TOK_R      ; CHECK R WORDS
    CPI  't'        ; T?
    JZ   TOK_T      ; CHECK T WORDS
    CPI  'v'        ; V?
    JZ   TOK_V      ; CHECK V WORDS
    CPI  'w'        ; W?
    JZ   TOK_W      ; CHECK W WORDS
    PUSH PSW        ; SAVE CHAR
    MOV  C,A        ; COPY CHAR INTO C
    PUSH B          ; PUSH CHAR
    LXI  B,VALID_STARTS   ; LOAD VALID SYMBOLS IN B
    PUSH B              ; PUSH STRING
    CALL CONTAINS
    ORA  A              ; RETURN 1?
    JNZ  TOK_PASS       ; PASS TOKEN


TOK_SYMBOL:
    NOP

TOK_PASS:
    NOP

TOK_A:
    INX  H

TOK_B:
TOK_C:
TOK_E:
TOK_F:
TOK_I:
TOK_N:
TOK_O:
TOK_R:
TOK_T:
TOK_V:
TOK_W:
    HLT

TOK_SKIP:
    INX  H
    JMP  TOK_START

TOK_ILLEGAL:
    POP  PSW
    POP  H
    LXI  H,0
    EXIT16

VALID_STARTS   DB   'abcdefghijklmnopqrstuvwxyz0123456789'
SYMBOL_TOKENS  DB   '()+-*/^&|~{}[]:,><=!',27H,0

